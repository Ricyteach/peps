PEP: 9999
Title: Complementary syntax for ``Union[]`` and ``Optional[]``
Author: Philippe PRADOS <python@prados.fr>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 28-Aug-2019
Python-Version: 3.9


Introduction
============

This PEP describes an extension to Python language, to add a complementary
syntax to write ``Union[X,Y]`` and ``Optional[X]`` easier.


Motivation
==========

The PEP484 [1]_ and PEP526 [2]_ propose a generic syntax to add typing to variables,
parameters and function returns. MyPy [3]_ accepts a syntax witch looks like something like this:

::

    annotation: name_type
    name_type: NAME (args)?
    args: '[' paramslist ']'
    paramslist: annotation (',' annotation)* [',']

- To describe a disjunction, the user must use ``Union[X,Y]``.

- To describe an optional value, the user must use ``Optional[X]``.

The verbosity of this syntax does not help the adoption.

Proposal
========

Inspired by Scala [4]_, this proposal adds two operators in the root ``type`` :

- ``__or__()``
- ``__invert__()``.

With these new operators, it is possible to write ``int | str`` in place of ``Union[int,str]`` and
``~int`` in place of ``Optional[int]``.

So, the new syntax for annotations will be :

::

    annotation: ( name_type | or_type | invert_type )
    or_type: name_type '|' annotation
    invert_type: '~' annotation
    name_type: NAME (args)?
    args: '[' paramslist ']'
    paramslist: annotation (',' annotation)* [',']


Then, it is possible to extend ``isinstance()`` and ``issubclass()``
to accept this new syntax for ``Union``.

Examples
========

Here are some examples of what we can do with this feature.

::

    # in place of
    # def f(list: List[Union[int, str]], param: Optional[int]) -> Union[float, str]
    def f(list: List[int | str], param: ~int) -> float | str:
        pass

    f([1,"abc"],None)

    assert str | int == Union[str,int]
    assert str | int | float == Union[str, int, float]
    assert ~str == Optional[str]

    isinstance("", int|str)
    issubclass(int, int|str)

Once the Python language is extended, MyPy [3]_ must be updated to accept this new syntax.

Incompatible changes
====================
Here are some examples of possible impacts with this feature.
In some situations, some exceptions will not be raised as expected.

::

    >> int | str
    # Before : TypeError: unsupported operand type(s) for |: 'type' and 'type'
    # After : typing.Union[int, str]

    >> ~int
    # Before: TypeError: bad operand type for unary ~: 'type'
    # After: typing.Union[int, NoneType]

    >> isinstance("", Union[int,str])
    # Before: TypeError: Subscripted generics cannot be used with class and instance checks
    # After: True

    >> issubclass(Union[int,str], Union[int,str])
    # Before: TypeError: Subscripted generics cannot be used with class and instance checks
    # After: True

    >> issubclass(int, Union[int, str])
    # Before: TypeError: Subscripted generics cannot be used with class and instance checks
    # After: True

    >> isinstance(42, int | str)
    # Before: TypeError: unsupported operand type(s) for |: 'type' and 'type'
    # After: True


Dissenting Opinion
==================

- `Discussion in python-ideas <https://mail.python.org/archives/list/python-ideas@python.org/thread/FCTXGDT2NNKRJQ6CDEPWUXHVG2AAQZZY/>`_

Reference Implementation
========================

A reference implementation for `cpython is here
<https://github.com/pprados/cpython/tree/updage_isinstance>`_.
A reference implementation for `mypy is here
<https://github.com/pprados/mypy/tree/add_INVERT_to_types>`_.


References
==========

.. [1] PEP484,
   https://www.python.org/dev/peps/pep-0484/
.. [2] PEP526,
   https://www.python.org/dev/peps/pep-0526/
.. [3] MyPy
   http://mypy-lang.org/
.. [4] Scala Union Types
   https://dotty.epfl.ch/docs/reference/new-types/union-types.html

Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
